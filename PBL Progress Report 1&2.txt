Topic: Diabetes Prediction Using Machine Learning


Group Members:
2127032 Trupti Kharat
2127062 Shreyash Somvanshi
2127063 Sujay Shinde
2127073 Vedanti Mane
2127076 Prajwal Rudrapwar




Explanation:
Diabetes is a chronic disease with the potential to cause a worldwide healthcare crisis. According to international Diabetes Federation 382 million people are living with diabetes across the whole world.
Motive of this project is to use the Artificial Intelligence technologies like Machine Learning in healthcare sector to increase efficiency and accuracy of results.This Diabetes Prediction using Machine Learning uses dataset containing  records of patient’s bmi,insulin, glucose level, age,etc..Currently we have achieved 80% accuracy but it can be made more precise with help of appropriate data processing. This Diabetes Prediction Model makes use of various classification Algorithms to categorize patients into diabetic and non-diabetic.




DATASET INFO: 


* Dataset link: https://github.com/Yantra-Byte/dataset/raw/main/Diabetes.csv


* Dataset shape:768 rows X 12 columns


Code:


# -*- coding: utf-8 -*-
"""PBL_DiabetesFinal.ipynb


Automatically generated by Colaboratory.


Original file is located at
    https://colab.research.google.com/drive/1IpgIYr-Vhc95CbLqkOEK78A8P8njEYoE
"""


import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score


dataset = pd.read_csv(r'https://github.com/Yantra-Byte/Dataset/raw/main/Diabetes.csv')


dataset.head()


dataset.tail()
dataset.shape


dataset.info()


dataset.isnull().sum()


dataset.describe()


dataset['diabetes'].value_counts()


X = dataset.drop(columns='diabetes',axis=1)


y = dataset['diabetes']


print(X)


print(y)


"""#Declaring Training and Testing Data"""


X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.6, random_state = 250)


X_train.shape, X_test.shape, y_train.shape, y_test.shape


"""#Logistic Regression"""


model = LogisticRegression()


"""Training the LogisticRegression model with training data"""


model.fit(X_train, y_train)


"""#Model Evaluation


Accuracy score


Accuracy on training data
"""


X_train_pred = model.predict(X_train)
trainingData_accuracy = accuracy_score(X_train_pred, y_train)
print("Accuracy on Training Data : ", trainingData_accuracy)


"""Accuracy on test data"""


X_test_pred = model.predict(X_test)
testData_accuracy = accuracy_score(X_test_pred, y_test)
print("Accuracy on Test Data : ", testData_accuracy)


"""#Building a Predictive System"""


inputData = (1,138,42,36,170,45.1,2.050,35)


"""Change input data to numpy array"""


inputDataNumpyArray = np.asarray(inputData)


"""Reshape the numpy array as we are predicting for only one instance"""


inputDataReshaped = inputDataNumpyArray.reshape(1,-1)


prediction = model.predict(inputDataReshaped)
print(prediction)


if (prediction[0]==0):
  print("The patient doesn't have Diabetes. ")
else:
  print("The patient is Diabetic. ")


Project Planning:
(Gantt Chart)


  





Class Diagram:






Project Progress: